# This file configures Charmcraft.
# See https://juju.is/docs/sdk/charmcraft-config for guidance.

name: opentelemetry-collector
type: charm
subordinate: true

summary: Vendor-agnostic way to receive, process and export telemetry data.
description: |
  The OpenTelemetry Collector offers a vendor-agnostic implementation on how to receive,
  process and export telemetry data. In addition, it removes the need to run, operate and
  maintain multiple agents/collectors in order to support open-source telemetry data formats
  (e.g. Jaeger, Prometheus, etc.) to multiple open-source or commercial back-ends.

links:
  # documentation: https://discourse.charmhub.io/
  website: https://charmhub.io/opentelemetry-collector
  source: https://github.com/canonical/opentelemetry-collector-operator
  issues: https://github.com/canonical/opentelemetry-collector-operator/issues

assumes:
  - k8s-api
  - juju >= 3.6

platforms:
  ubuntu@24.04:amd64:
  ubuntu@24.04:arm64:

parts:
  charm:
    source: .
    plugin: uv
    build-packages: [git]
    build-snaps: [astral-uv]
    override-build: |
      craftctl default
      git describe --always > $CRAFT_PART_INSTALL/version
  cos-tool:
    plugin: dump
    source: https://github.com/canonical/cos-tool/releases/latest/download/cos-tool-${CRAFT_ARCH_BUILD_FOR}
    source-type: file
    permissions:
      - path: cos-tool-${CRAFT_ARCH_BUILD_FOR}
        mode: "755"

provides:
  grafana-dashboards-provider:
    interface: grafana_dashboard
    description: |
      Send own and aggregated dashboards to grafana.
  receive-loki-logs:
    interface: loki_push_api
    optional: true
    description: To receive logs by allowing Promtail instances to specify otelcol as their Loki address.
  # TODO https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/37277
  # receive-remote-write:
  #   interface: prometheus_remote_write

requires:
  grafana-dashboards-consumer:
    interface: grafana_dashboard
    description: |
      Collect dashboards to be forwarded to grafana.
  metrics-endpoint:
    interface: prometheus_scrape
    optional: true
    description: To scrape other charms' metrics endpoints.
  send-remote-write:
    interface: prometheus_remote_write
    optional: true
    description: To forward collected metrics to a Prometheus backend.
  send-loki-logs:
    interface: loki_push_api
    optional: true
    description: To forward collected logs to a Loki backend.
  receive-ca-cert:
    interface: certificate_transfer
    optional: true
    description: |
      For otelcol to create a trusted (TLS) connection with servers
      it scrapes, pushes to, etc., it needs to trust the CA that signed
      the server it talks to. CA certs forwarded over this relation are
      installed in the root CA store.
  cloud-config:
    interface: grafana_cloud_config
    optional: true
    limit: 1
    description: Forward telemetry to another Observability stack (Grafana Cloud, COS, etc.).
  receive-server-cert:
    interface: tls-certificates
    optional: true
    limit: 1
    description: |
      Obtain a certificate from a CA.
      The charm sends a CSR over this relation and receives a signed certificate back.
      That is the cert that would be presented to incoming TLS connections.

config:
  options:
    forward_alert_rules:
      description: >
        Toggle forwarding of alert rules.
      type: boolean
      default: true
    tls_insecure_skip_verify:
      description: |
        Flag to skip the validation of certificates from servers we connect to with TLS.
        If "true", self-signed certs can be used seamlessly; this setting will be applied
        to all the otelcol exporter configurations and any receivers which actively make
        requests to servers, e.g. the prometheus receiver scraping metrics endpoints.
      type: boolean
      default: false

actions:
  reconcile:
    description: >
      Regenerate the world state from scratch. This includes the configuration file,
      but also relation data set by the charm.
